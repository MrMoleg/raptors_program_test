// Generated by gencpp from file raptors_task/Person.msg
// DO NOT EDIT!


#ifndef RAPTORS_TASK_MESSAGE_PERSON_H
#define RAPTORS_TASK_MESSAGE_PERSON_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace raptors_task
{
template <class ContainerAllocator>
struct Person_
{
  typedef Person_<ContainerAllocator> Type;

  Person_()
    : IndexNumber(0)
    , Name()
    , Surname()
    , Section()
    , YearOfBirth(0)  {
    }
  Person_(const ContainerAllocator& _alloc)
    : IndexNumber(0)
    , Name(_alloc)
    , Surname(_alloc)
    , Section(_alloc)
    , YearOfBirth(0)  {
  (void)_alloc;
    }



   typedef int32_t _IndexNumber_type;
  _IndexNumber_type IndexNumber;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _Name_type;
  _Name_type Name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _Surname_type;
  _Surname_type Surname;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _Section_type;
  _Section_type Section;

   typedef int32_t _YearOfBirth_type;
  _YearOfBirth_type YearOfBirth;





  typedef boost::shared_ptr< ::raptors_task::Person_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raptors_task::Person_<ContainerAllocator> const> ConstPtr;

}; // struct Person_

typedef ::raptors_task::Person_<std::allocator<void> > Person;

typedef boost::shared_ptr< ::raptors_task::Person > PersonPtr;
typedef boost::shared_ptr< ::raptors_task::Person const> PersonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::raptors_task::Person_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::raptors_task::Person_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::raptors_task::Person_<ContainerAllocator1> & lhs, const ::raptors_task::Person_<ContainerAllocator2> & rhs)
{
  return lhs.IndexNumber == rhs.IndexNumber &&
    lhs.Name == rhs.Name &&
    lhs.Surname == rhs.Surname &&
    lhs.Section == rhs.Section &&
    lhs.YearOfBirth == rhs.YearOfBirth;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::raptors_task::Person_<ContainerAllocator1> & lhs, const ::raptors_task::Person_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace raptors_task

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::raptors_task::Person_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raptors_task::Person_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptors_task::Person_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raptors_task::Person_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptors_task::Person_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raptors_task::Person_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::raptors_task::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c66f7d04e1fe420ad3f0efb223970bc";
  }

  static const char* value(const ::raptors_task::Person_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c66f7d04e1fe420ULL;
  static const uint64_t static_value2 = 0xad3f0efb223970bcULL;
};

template<class ContainerAllocator>
struct DataType< ::raptors_task::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "raptors_task/Person";
  }

  static const char* value(const ::raptors_task::Person_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::raptors_task::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 IndexNumber\n"
"string Name\n"
"string Surname\n"
"string Section\n"
"int32 YearOfBirth\n"
;
  }

  static const char* value(const ::raptors_task::Person_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::raptors_task::Person_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.IndexNumber);
      stream.next(m.Name);
      stream.next(m.Surname);
      stream.next(m.Section);
      stream.next(m.YearOfBirth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Person_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raptors_task::Person_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::raptors_task::Person_<ContainerAllocator>& v)
  {
    s << indent << "IndexNumber: ";
    Printer<int32_t>::stream(s, indent + "  ", v.IndexNumber);
    s << indent << "Name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.Name);
    s << indent << "Surname: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.Surname);
    s << indent << "Section: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.Section);
    s << indent << "YearOfBirth: ";
    Printer<int32_t>::stream(s, indent + "  ", v.YearOfBirth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAPTORS_TASK_MESSAGE_PERSON_H
